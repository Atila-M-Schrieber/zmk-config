//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define Base        0
#define Media       1
#define Nav         2
#define NumSym      3
#define Game        4
#define Gameplus    5
#define Accent      6

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        fsu: flip_shift_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "FLIP_SHIFT_UNDERSCORE";
            bindings = <&kp UNDER>, <&kt MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        f1s: f1or11 {
            compatible = "zmk,behavior-mod-morph";
            label = "F1OR11";
            bindings = <&kp F1>, <&kp F11>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        f2s: f2_or_f12 {
            compatible = "zmk,behavior-mod-morph";
            label = "F2_OR_F12";
            bindings = <&kp F2>, <&kp F12>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sqns: single_quote_no_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SINGLE_QUOTE_NO_SHIFT";
            bindings = <&kp SQT>, <&kp SQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dqns: double_quote_no_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "DOUBLE_QUOTE_NO_SHIFT";
            bindings = <&kp DQT>, <&kp DQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        eqns: equal_no_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_NO_SHIFT";
            bindings = <&kp EQUAL>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <12 21>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };
    };

    macros {
        cps: copy_shot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R) &kp C>;
            label = "COPY_SHOT";
        };

        fsh: full_screen_shot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R) &kp F>;
            label = "FULL_SCREEN_SHOT";
        };

        acc: accent {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press &kp RALT>,
                <&macro_param_1to1>,
                <&macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_param_2to1>,
                <&macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp RALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
            &kp Q        &kp W        &kp F          &kp P        &kp B        &kp J        &kp L       &kp U         &kp Y        &kp SEMI     &mo 4
&kp ESCAPE  &hm LSHFT A  &hm LCTRL R  &hm LMETA S    &hm LALT T   &kp G        &kp M        &hm RALT N  &hm RMETA E   &hm RCTRL I  &hm RSHFT O  &kp APOS
&kp LPAR    &kp Z        &kp X        &kp C          &kp D        &kp V        &kp K        &kp H       &kp COMMA     &kp DOT      &kp SLASH    &kp RPAR
                                      &kp BACKSPACE  &lt 3 SPACE  &kp ENTER    &kp SPACE  &lt 2 TAB   &lt 1 DELETE
            >;
        };

        Media {
            label = "Media";
            bindings = <
        &trans  &trans  &fsh      &trans    &kp C_BRI_UP     &trans  &kp C_MUTE  &kp C_VOL_UP  &kp C_VOL_UP  &trans      &trans
&trans  &trans  &trans  &trans    &trans    &trans           &trans  &kp C_PREV  &kp C_PP      &kp C_STOP    &kp C_NEXT  &trans
&trans  &trans  &trans  &cps      &trans    &kp C_BRI_DEC    &trans  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_DN  &trans      &trans
                        &mkp MB2  &mkp MB1  &mkp MB3         &trans  &trans      &trans
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
          &trans  &kp LC(RIGHT)  &trans  &kp LS(LC(V))  &kp LC(LEFT)    &trans    &kp END   &kp PG_UP  &kp LC(C)  &trans     &trans
&kp LBRC  &trans  &trans         &trans  &trans         &trans          &kp CAPS  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp RIGHT_BRACE
&kp LBKT  &trans  &kp DEL        &trans  &kp PG_DN      &trans          &trans    &kp HOME  &kp LT     &kp GT     &kp LC(F)  &kp RBKT
                                 &trans  &fsu           &trans          &trans    &trans    &trans
            >;
        };

        NumSym {
            label = "NumSym";
            bindings = <
           &kp LG(N1)    &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)    &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp MINUS     &trans
&kp EQUAL  &hm LSHFT N9  &kp N7      &kp N0      &kp N3      &kp F3        &f1s        &kp N1      &kp N2      &kp N4      &hm RSHFT N8  &kp GRAVE
&trans     &kp F9        &kp F7      &kp F10     &kp N5      &kp F5        &kp F6      &kp N6      &f2s        &kp F4      &kp F8        &kp BSLH
                                     &trans      &trans      &trans        &trans      &trans      &trans
            >;
        };

        Game {
            label = "Game";
            bindings = <
        &kp TAB         &kp Z  &kp X     &kp C         &kp V        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_SHIFT  &kp Q  &kp W     &kp E         &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LCTRL       &kp A  &kp S     &kp D         &kp F        &trans  &trans  &trans  &trans  &trans  &trans
                               &kp LALT  &lt 5 ESCAPE  &kp SPACE    &trans  &trans  &trans
            >;
        };

        Gameplus {
            label = "Gameplus";
            bindings = <
        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp G         &trans        &trans        &trans        &kp T           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TAB       &trans        &trans        &trans        &kp B           &trans  &trans  &trans  &trans  &trans  &trans
                                    &kp ESCAPE    &trans        &tog 4          &trans  &trans  &trans
            >;
        };

        Accent {
            bindings = <
        &trans      &trans  &trans  &trans  &trans    &trans  &acc U SQT  &acc U DQT  &acc EQUAL U  &acc EQUAL O  &trans
&trans  &acc A SQT  &trans  &trans  &trans  &trans    &trans  &trans      &acc E SQT  &acc I SQT    &acc O DQT    &trans
&trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans      &trans      &trans        &acc SQT O    &trans
                            &trans  &trans  &trans    &trans  &trans      &trans
            >;
        };
    };
};
